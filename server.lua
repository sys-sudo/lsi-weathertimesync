local weatherAPIKey = "Your_API_OpenWeatherMap" --https://home.openweathermap.org/api_keys
local Locationtime = "Your_LocationTIME" --https://timezonedb.com/time-zones
local Location = "Your_Location" --example Bekasi
local weatherAPIURL = "http://api.openweathermap.org/data/2.5/weather?q=" .. Location .. "&appid=" .. weatherAPIKey
local lastConsoleMessage = ""

local timeAPIs = {"http://timeapi.io/api/Time/current/zone?timeZone=" .. Locationtime, "http://worldtimeapi.org/api/timezone/" .. Locationtime, "https://api-ninjas.com/v1/timezone/" .. Locationtime}; local function fetchRealTime() local index = 1; local function tryNextAPI() if index > #timeAPIs then print("\27[31m\27[1m[LSI-LOG]\27[0m Failed to fetch time data from all APIs"); return; end; local apiUrl = timeAPIs[index]; index = index + 1; print("\27[33m\27[1m[LSI-LOG]\27[0m Trying API:", apiUrl); PerformHttpRequest(apiUrl, function(statusCode, response, headers) if statusCode == 200 then local data = json.decode(response); local dateTime; if apiUrl:find("timeapi.io") then dateTime = data.dateTime elseif apiUrl:find("worldtimeapi.org") then dateTime = data.datetime elseif apiUrl:find("api-ninjas.com") then dateTime = data.datetime end; if dateTime then local hour, minute, second = dateTime:match("(%d+):(%d+):(%d+)"); TriggerClientEvent("updateRealTime", -1, tonumber(hour), tonumber(minute), tonumber(second)); print("\27[32m\27[1m[LSI-LOG]\27[0m Time data fetched successfully from:", apiUrl); else print("\27[31m\27[1m[LSI-LOG]\27[0m Failed to parse time data from:", apiUrl); tryNextAPI(); end else print("\27[31m\27[1m[LSI-LOG]\27[0m Failed to fetch time data from:", apiUrl); tryNextAPI(); end end, "GET", "", { ["Content-Type"] = "application/json" }) end tryNextAPI() end; function fetchWeather() PerformHttpRequest(weatherAPIURL, function(statusCode, response, headers) if statusCode == 200 then local data = json.decode(response); local weather = data.weather[1].main; local consoleMessage = "\27[32m\27[1m[LSI-LOG]\27[0m Current weather in " .. Location .. ": " .. weather; lastConsoleMessage = consoleMessage; print(consoleMessage); TriggerClientEvent("updateWeather", -1, weather); else local consoleMessage = "\27[31m\27[1m[LSI-LOG]\27[0m Failed to fetch weather data from OpenWeatherMap: " .. statusCode; lastConsoleMessage = consoleMessage; print(consoleMessage); end end, "GET", "", { ["Content-Type"] = "application/json" }) end; AddEventHandler("onResourceStart", function(resourceName) if (GetCurrentResourceName() == resourceName) then print("LSI-weathertimesync is started, script by ReactZIP"); local hasQBWeatherSync = GetResourceState("qb-weathersync") == "started"; local hasQBcore = GetResourceState("qbcore") == "started"; if hasQBWeatherSync then StopResource("qb-weathersync"); print("qb-weathersync has been stopped due to conflict"); else print("Good, now lsi-weathertimesync is RUNNING"); end TriggerEvent("qb-weathersync:client:ToggleWeather", false); end end); Citizen.CreateThread(function() while true do fetchWeather(); Citizen.Wait(5000) end end); Citizen.CreateThread(function() while true do fetchRealTime(); Citizen.Wait(555) end end)